version: "3.5"

services:
  rabbit:
    image: rabbitmq:3.8.5-management
    ports:
      - '15673:15672' # in case user has rabbitMQ installed on host
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}

  # flower:
  #   build:
  #     context: ./flower
  #     dockerfile: Dockerfile
  #   # note: originally the command was: /flower/wait-for-it.sh rabbit:5672 -- celery --broker=amqp://axiome3:neufeld@rabbit:5672/axiome3_host flower --broker_api=http://axiome3:neufeld@rabbit:15672/api/axiome3_host --port=5555
  #   # However, due to flower using an outdated jQuery, it causes IST issues and has been disabled
  #   # If one day jQuery is updated for flower, we can start using it again
  #   command: "/flower/wait-for-it.sh rabbit:5672 -- celery --broker=amqp://axiome3:neufeld@rabbit:5672/axiome3_host"
  #   ports:
  #     - 5555:5555
  #   restart: on-failure
  #   volumes:
  #     - ./flower:/flower

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      args:
        - QIIME2_RELEASE=${QIIME2_VERSION}
        #- CLASSIFIER_GDRIVE_ID=${CLASSIFIER_GDRIVE_ID}
    command: ["python", "prod_server.py", '--py-autoreload', '1']
    volumes:
      - ../backend:/backend
      - ../pipeline:/pipeline
      - /:/hostfs:ro # Assumes host root is '/'
      - ${OUTPUT_PATH}:/output # Stores all the output to this directory
      - ../log:/log # For logging
      - input:/input # Named volume
    ports:
      - '5000'
    environment:
      - FLASK_ENV=development
      - FLASK_APP=AXIOME3_app/app
      - PYTHONPATH=/pipeline # Add AXIOME3 pipeline to PYTHONPATH
      - LUIGI_CONFIG_PATH=/pipeline/configuration/luigi.cfg
      - GMAIL_SENDER=${GMAIL_SENDER}
      - RUN_ENV=8080
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}
    restart: on-failure

  pipeline_worker:
    build:
      context: ../backend
      dockerfile: Dockerfile
      args:
        - QIIME2_RELEASE=${QIIME2_VERSION}
        #- CLASSIFIER_GDRIVE_ID=${CLASSIFIER_GDRIVE_ID}
    command: "celery -A AXIOME3_app.celery_app:app worker --concurrency=1 -n worker1@%h -Q pipeline --loglevel=INFO"
    volumes:
      - /:/hostfs:ro # Assumes host root is '/'
      - ../backend:/backend
      - ../pipeline:/pipeline
      - ${OUTPUT_PATH}:/output # Stores all the output to this directory
      - ../log:/log # For logging
      - input:/input # Named volume
    environment:
      - PYTHONPATH=/pipeline # Add AXIOME3 pipeline to PYTHONPATH
      - LUIGI_CONFIG_PATH=/pipeline/configuration/luigi.cfg
      - GMAIL_SENDER=${GMAIL_SENDER}
      - RUN_ENV=8080
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}
    restart: on-failure

  extension_worker:
    build:
      context: ../backend
      dockerfile: Dockerfile
      args:
        - QIIME2_RELEASE=${QIIME2_VERSION}
        #- CLASSIFIER_GDRIVE_ID=${CLASSIFIER_GDRIVE_ID}
    command: "celery -A AXIOME3_app.celery_app:app worker --concurrency=1 -n worker2@%h -Q extension --loglevel=INFO"
    volumes:
      - /:/hostfs:ro # Assumes host root is '/'
      - ../backend:/backend
      - ../pipeline:/pipeline
      - ${OUTPUT_PATH}:/output # Stores all the output to this directory
      - ../log:/log # For logging
      - input:/input # Named volume
    environment:
      - PYTHONPATH=/pipeline # Add AXIOME3 pipeline to PYTHONPATH
      - RUN_ENV=8080
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}
    restart: on-failure

  app:
    build:
      context: ../
      dockerfile: ./docker_files/production.Dockerfile
      args:
        - REACT_APP_QIIME2_RELEASE=${QIIME2_VERSION}
        - REACT_APP_SILVA_VERSION=${SILVA_VERSION}
        - REACT_APP_RUN_ENV=8080
        - REACT_APP_OUTPUT_DIR_PATH=/hostfs${OUTPUT_PATH}
    volumes:
      - ../nginx/prod/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - '8080:80'
    depends_on:
      - backend
    environment:
      - PORT=8080
      # - REACT_APP_QIIME2_RELEASE=2020.6
      # - REACT_APP_SILVA_VERSION=138
      # - REACT_APP_RUN_ENV=8080
      # - REACT_APP_OUTPUT_DIR_PATH=/hostfs/Analysis/AXIOME3/output # will still run without this since it exists in Dockerfile, but leaving it in just in case
    command: "nginx -g 'daemon off;'"

volumes:
  input:
  node_module: