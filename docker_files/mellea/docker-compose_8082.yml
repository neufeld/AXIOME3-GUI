# This will spin up AXIOME3 on a different set of ports from regular AXIOME3 so we can use this yml for testing
# Run docker-compose with the project name flag as -p axiome3-prod-test
version: "3.5"
services:
  rabbit3:
    image: rabbitmq:3.8.5-management
    ports:
      - '15675:15672' # in case user has rabbitMQ installed on host
    environment:
      - RABBITMQ_DEFAULT_USER=axiome3
      - RABBITMQ_DEFAULT_PASS=neufeld
      - RABBITMQ_DEFAULT_VHOST=axiome3_host

  # flower2:
  #   build:
  #     context: ./flower
  #     dockerfile: Dockerfile
  #   # note: originally the command was: /flower/wait-for-it.sh rabbit:5673 -- celery --broker=amqp://axiome3:neufeld@rabbit:5673/axiome3_host flower --broker_api=http://axiome3:neufeld@rabbit:15672/api/axiome3_host --port=5556
  #   # However, due to flower using an outdated jQuery, it causes IST issues and has been disabled
  #   # If one day jQuery is updated for flower, we can start using it again
  #   command: "/flower/wait-for-it.sh rabbit:5673 -- celery --broker=amqp://axiome3:neufeld@rabbit:5673/axiome3_host"
  #   ports:
  #     - 5556:5556
  #   restart: on-failure
  #   volumes:
  #     - ./flower:/flower

  backend3:
    build:
      context: ./backend
      dockerfile: Dockerfile_qiime_new
      args:
        - QIIME2_RELEASE=2021.8
        - CLASSIFIER_GDRIVE_ID=12jug9XZcbUefevtTnENGudjGqaAL0LCo
    command: ["python", "prod_server.py", '--py-autoreload', '1']
    volumes:
      - ./backend:/backend
      - ./pipeline:/pipeline
      - /:/hostfs:ro # Assumes host root is '/'
      - /Winnebago/AXIOME3/output:/output # Stores all the output to this directory
      - ./log:/log # For logging
      - input:/input # Named volume
    ports:
      - '5002'
    environment:
      - FLASK_ENV=development
      - FLASK_APP=AXIOME3_app/app
      - PYTHONPATH=/pipeline # Add AXIOME3 pipeline to PYTHONPATH
      - LUIGI_CONFIG_PATH=/pipeline/configuration/luigi.cfg
      - GMAIL_SENDER=axiome333@gmail.com
      - RUN_ENV=8082
    restart: "no"
    stdin_open: true
    tty: true

  pipeline_worker3:
    build:
      context: ./backend
      dockerfile: Dockerfile_qiime_new
      args:
        - QIIME2_RELEASE=2021.8
        - CLASSIFIER_GDRIVE_ID=12jug9XZcbUefevtTnENGudjGqaAL0LCo
    command: "celery -A AXIOME3_app.celery_app:app worker --concurrency=1 -n worker5@%h -Q pipeline --loglevel=INFO"
    volumes:
      - /:/hostfs:ro # Assumes host root is '/'
      - ./backend:/backend
      - ./pipeline:/pipeline
      - /Winnebago/AXIOME3/output:/output # Stores all the output to this directory
      - ./log:/log # For logging
      - input:/input # Named volume
    environment:
      - PYTHONPATH=/pipeline # Add AXIOME3 pipeline to PYTHONPATH
      - LUIGI_CONFIG_PATH=/pipeline/configuration/luigi.cfg
      - GMAIL_SENDER=axiome333@gmail.com
      - RUN_ENV=8082
    restart: "no"

  extension_worker3:
    build:
      context: ./backend
      dockerfile: Dockerfile_qiime_new
      args:
        - QIIME2_RELEASE=2021.8
        - CLASSIFIER_GDRIVE_ID=12jug9XZcbUefevtTnENGudjGqaAL0LCo
    command: "celery -A AXIOME3_app.celery_app:app worker --concurrency=1 -n worker6@%h -Q extension --loglevel=INFO"
    volumes:
      - /:/hostfs:ro # Assumes host root is '/'
      - ./backend:/backend
      - ./pipeline:/pipeline
      - /Winnebago/AXIOME3/output:/output # Stores all the output to this directory
      - ./log:/log # For logging
      - input:/input # Named volume
    environment:
      - PYTHONPATH=/pipeline # Add AXIOME3 pipeline to PYTHONPATH
      - RUN_ENV=8082
    restart: "no"

  app3:
    build:
      context: .
      dockerfile: production_test_qiime_new.Dockerfile
    volumes:
      - ./nginx/prod/nginx3.conf:/etc/nginx/nginx.conf
    ports:
      - '8082:82'
    depends_on:
      - backend3
    environment:
      - PORT=8082
      - REACT_APP_QIIME2_RELEASE=2021.8
      - REACT_APP_SILVA_VERSION=138
      - REACT_APP_RUN_ENV=8082
      - REACT_APP_OUTPUT_DIR_PATH=/hostfs/Winnebago/AXIOME3/output # will still run without this since it exists in Dockerfile, but leaving it in just in case
    command: "nginx -g 'daemon off;'"

volumes:
  input:
  node_module: